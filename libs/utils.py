# AUTOGENERATED! DO NOT EDIT! File to edit: nbs/00_utils.ipynb (unless otherwise specified).

__all__ = ['get_dataframe', 'get_test_dataframe']

# Cell
# export
import pandas as pd
from pathlib import Path

# Cell
def get_dataframe(fn = 'dataset_training_477.csv',
                  DATA_DIR=Path('/media/ScaleOut/vahldiek/MRI/SIJ'),
                  preprocessed_images=True,
                  grid_view=False,
                  denoised = False):
    "Returns the dataframe with correct filenames for MRI-SpA project"

    df = pd.read_csv(DATA_DIR/fn)
    df = df[df.has_TIRM == 1]
    df = df[df.has_T1 == 1]
    df = df.rename(columns={'path_TIRM': 'TIRM',
                            'path_T1': 'T1',
                            'ASAS_compatible_changes': 'asas_compatible_changes'})

    if preprocessed_images:
        df['TIRM'] = ['01_preprocessed/' + fn + '_TIRM.nii.gz' for fn in df.patient_ID]
        df['T1'] = ['01_preprocessed/' + fn + '_T1.nii.gz' for fn in df.patient_ID]

    if denoised:
        df['TIRM'] = ['05_denoised/' + fn + '_TIRM.nii.gz' for fn in df.patient_ID]
        df['T1'] = ['05_denoised/' + fn + '_T1.nii.gz' for fn in df.patient_ID]

    if grid_view:
        df['TIRM'] = ['03_grid_view/' + fn + '_TIRM.png' for fn in df.patient_ID]
        df['T1'] = ['03_grid_view/' + fn + '_T1.png' for fn in df.patient_ID]

    df['asas_compatible_changes'] = ['asas_compatible_changes' if x == '1' else 'no_asas_compatible_changes' for x in df.asas_compatible_changes]
    df['active_changes'] = ['active_changes' if x == 1 else 'no_active_changes' for x in df.active_changes]
    df['structural_changes'] = ['structural_changes' if x == 1 else 'no_structural_changes' for x in df.structural_changes]
    combined_label = []
    for act, struc in zip(df.active_changes, df.structural_changes):
        if 'no' in act: act = ''
        if 'no' in struc: struc = ''
        delim = ';' if act != '' and struc != '' else ''
        combined_label.append(act + delim + struc)
    df['combined_label'] = combined_label

    return df

# Cell
def get_test_dataframe(DATA_DIR=Path('/media/ScaleOut/vahldiek/MRI/SIJ'),
                       preprocessed_images=True,
                       grid_view=False,
                       denoised=False):
    "Returns the test dataframe with correct filenames for MRI-SpA project"

    df = pd.read_csv(DATA_DIR/'ASAS_holdout_130_with_asas.csv')
    df = df[df.has_TIRM == 1]
    df = df[df.has_T1 == 1]
    df = df.rename(columns={'struct_changes': 'structural_changes',
                            'path_TIRM': 'TIRM',
                            'path_T1': 'T1',
                            'ASAS_compatible_changes': 'asas_compatible_changes'})

    if preprocessed_images:
        df['TIRM'] = ['01_preprocessed/' + fn + '_TIRM.nii.gz' for fn in df.patient]
        df['T1'] = ['01_preprocessed/' + fn + '_T1.nii.gz' for fn in df.patient]

    if denoised:
        df['TIRM'] = ['05_denoised/' + fn + '_TIRM.nii.gz' for fn in df.patient]
        df['T1'] = ['05_denoised/' + fn + '_T1.nii.gz' for fn in df.patient]

    if grid_view:
        df['TIRM'] = ['03_grid_view/' + fn + '_TIRM.png' for fn in df.patient]
        df['T1'] = ['03_grid_view/' + fn + '_T1.png' for fn in df.patient]

    df['active_changes'] = ['active_changes' if x == 1 else 'no_active_changes' for x in df.active_changes]
    df['structural_changes'] = ['structural_changes' if x == 1 else 'no_structural_changes' for x in df.structural_changes]
    df['asas_compatible_changes'] = ['asas_compatible_changes' if x == 1 else 'no_asas_compatible_changes' for x in df.asas_compatible_changes]

    combined_label = []
    for act, struc in zip(df.active_changes, df.structural_changes):
        if 'no' in act: act = ''
        if 'no' in struc: struc = ''
        delim = ';' if act != '' and struc != '' else ''
        combined_label.append(act + delim + struc)
    df['combined_label'] = combined_label
    df = df[-df.patient.isin(['Case070', 'Case043', 'Case134'])] # need to be excluded because of missing data
    return df

# Cell
import sklearn.metrics as metrics
import torch
from fastcore.all import *
from fastai.metrics import *
from fastai.interpret import ClassificationInterpretation
from fastai.torch_core import flatten_check

# Cell
@patch
def plot_roc(self:ClassificationInterpretation):
    "Plot a ROC curve with AUC from decoded preds and targets"
    # calculate the fpr and tpr for all thresholds of the classification
    d,t = flatten_check(self.preds[:, 1], self.targs)
    d = d.numpy()
    t = t.numpy()
    fpr, tpr, threshold = metrics.roc_curve(t, d)
    roc_auc = metrics.auc(fpr, tpr)

    # method I: plt
    import matplotlib.pyplot as plt
    plt.title('Receiver Operating Characteristic')
    plt.plot(fpr, tpr, 'b', label = 'AUC = %0.2f' % roc_auc)
    plt.legend(loc = 'lower right')
    plt.plot([0, 1], [0, 1],'r--')
    plt.xlim([0, 1])
    plt.ylim([0, 1])
    plt.ylabel('True Positive Rate')
    plt.xlabel('False Positive Rate')
    plt.show()