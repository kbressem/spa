# AUTOGENERATED! DO NOT EDIT! File to edit: nbs/02_augment.ipynb (unless otherwise specified).

__all__ = ['TorchIOTransform', 'TioTransforms', 'TioRandomBiasField', 'TioRandomGhosting', 'TioRandomMotion',
           'TioRandomGamma', 'TioRandomAnisotropy', 'TioRandomElasticDeformation']

# Cell
# default_exp augment
import torchio as tio
from fastai.vision.augment import RandTransform
from faimed3d.all import *

from .utils import get_dataframe

# Cell
class TorchIOTransform(RandTransform):
    def __init__(self, tfm_name, p=0.2, **kwargs):
        super().__init__(p=p)
        self.transform = getattr(tio, tfm_name)(**kwargs)

    def encodes(self, x:TensorMask3D):
        return x

    def encodes(self, x:TensorDicom3D):
        assert x.device == torch.device('cpu'), "No cuda support for torchIO transforms"
        meta = x._metadata
        if x.ndim == 3: x = x.unsqueeze(0)
        x = TensorDicom3D(self.transform(x)).squeeze()
        x._metadata = meta
        return x

# Cell
def TioTransforms(p_all=None,
                  tfms = ['RandomBiasField', 'RandomGhosting', 'RandomMotion',
                          'RandomGamma', 'RandomAnisotropy']):
    if not p_all: p_all = 1/len(tfms)
    return [TorchIOTransform(tfm_name, p=p_all) for tfm_name in tfms]

# Cell
class TioRandomBiasField(TorchIOTransform):
    def __init__(self, **kwargs):
        super().__init__(tfm_name = 'RandomBiasField', **kwargs)

class TioRandomGhosting(TorchIOTransform):
    def __init__(self, **kwargs):
        super().__init__(tfm_name = 'RandomGhosting', **kwargs)

class TioRandomMotion(TorchIOTransform):
    def __init__(self, **kwargs):
        super().__init__(tfm_name = 'RandomMotion', **kwargs)

class TioRandomGamma(TorchIOTransform):
    def __init__(self, **kwargs):
        super().__init__(tfm_name = 'RandomGamma', **kwargs)

class TioRandomAnisotropy(TorchIOTransform):
    def __init__(self, **kwargs):
        super().__init__(tfm_name = 'RandomAnisotropy', **kwargs)

class TioRandomElasticDeformation(TorchIOTransform):
    def __init__(self, **kwargs):
        super().__init__(tfm_name = 'RandomElasticDeformation', **kwargs)