# AUTOGENERATED! DO NOT EDIT! File to edit: nbs/01_preprocessing.ipynb (unless otherwise specified).

__all__ = ['field_bias_correction', 'denoising', 'clip_tail', 'hist_matching', 'Pipeline', 'preprocessing_pipeline']

# Cell
# default_exp preprocessing
import pandas as pd
from pathlib import Path
import SimpleITK as sitk
from faimed3d.all import *

# Cell
def field_bias_correction(image, numberFittingLevels = 4, numberOfIteration = [50]):
    corrector = sitk.N4BiasFieldCorrectionImageFilter()
    corrector.SetMaximumNumberOfIterations(numberOfIteration * numberFittingLevels)
    bias_corrected = corrector.Execute(
        sitk.Cast(image.as_sitk(),
                  sitk.sitkFloat32))
    bias_corrected = TensorDicom3D.create(bias_corrected)
    bias_corrected._metadata = image._metadata
    return bias_corrected

# Cell
def denoising(image):
    denoised_image = sitk.CurvatureFlow(
        image1=image.as_sitk(),
        timeStep=0.125,
        numberOfIterations=3)
    denoised_image = TensorDicom3D.create(denoised_image)
    denoised_image._metadata = image._metadata
    return denoised_image

# Cell
def clip_tail(image, lwr_quant=0, upr_quant=0.99):
    lwr = image.quantile(lwr_quant)
    upr = image.quantile(upr_quant)
    return image.clip(lwr, upr)

# Cell
def hist_matching(image, reference):
    hist_matching = sitk.HistogramMatchingImageFilter()
    hist_matching.ThresholdAtMeanIntensityOn()
    hist_matched_image = hist_matching.Execute(image.as_sitk(), reference_image.as_sitk())
    return TensorDicom3D.create(hist_matched_image)

# Cell
class Pipeline():
    def __init__(self, functions:(list, tuple)):
        assert isinstance(functions, (list, tuple)), 'Functions need to be in a list or tuple'
        self.functions = functions

    def append(self, f):
        self.functions.append(f)

    def __call__(self, x):
        for f in self.functions: x = f(x)
        return x

# Cell
preprocessing_pipeline = Pipeline([Resample3D((20, 224, 224), (3.5, 1, 1)), clip_tail, field_bias_correction])